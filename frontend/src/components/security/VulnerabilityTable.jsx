// src/components/security/VulnerabilityTable.jsx
import React, { useState } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  Chip,
  IconButton,
  Box,
  TablePagination,
  TableSortLabel,
  Tooltip
} from '@mui/material';
import { 
  Visibility as ViewIcon,
  ContentCopy as CopyIcon,
  Check as CheckIcon
} from '@mui/icons-material';

const VulnerabilityTable = ({ vulnerabilities, onViewDetails }) => {
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [orderBy, setOrderBy] = useState('severity');
  const [order, setOrder] = useState('desc');
  const [copiedId, setCopiedId] = useState(null);
  
  if (!vulnerabilities || vulnerabilities.length === 0) {
    return (
      <Box sx={{ p: 3, textAlign: 'center' }}>
        <Typography variant="body1" color="textSecondary">
          No vulnerabilities detected.
        </Typography>
      </Box>
    );
  }
  
  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };
  
  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };
  
  const handleRequestSort = (property) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };
  
  const handleCopyDetails = (id, text) => {
    navigator.clipboard.writeText(text);
    setCopiedId(id);
    
    // Reset copied status after 2 seconds
    setTimeout(() => {
      setCopiedId(null);
    }, 2000);
  };
  
  const getSeverityColor = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'critical':
        return 'error';
      case 'high':
        return 'error';
      case 'medium':
        return 'warning';
      case 'low':
        return 'info';
      default:
        return 'default';
    }
  };
  
  const getTypeLabel = (type) => {
    switch (type?.toLowerCase()) {
      case 'dependency':
        return 'Dependency';
      case 'code_pattern':
        return 'Code Pattern';
      case 'secret':
        return 'Secret';
      case 'configuration':
        return 'Configuration';
      default:
        return type;
    }
  };
  
  // Sort function
  const sortedVulnerabilities = React.useMemo(() => {
    const comparator = (a, b) => {
      // Define severity order for sorting
      const severityOrder = {
        'critical': 0,
        'high': 1,
        'medium': 2,
        'low': 3
      };
      
      if (orderBy === 'severity') {
        const severityA = severityOrder[a.severity?.toLowerCase()] ?? 4;
        const severityB = severityOrder[b.severity?.toLowerCase()] ?? 4;
        return order === 'asc' ? severityA - severityB : severityB - severityA;
      }
      
      // For other columns
      const valueA = a[orderBy] || '';
      const valueB = b[orderBy] || '';
      
      if (typeof valueA === 'string' && typeof valueB === 'string') {
        return order === 'asc' 
          ? valueA.localeCompare(valueB)
          : valueB.localeCompare(valueA);
      }
      
      return order === 'asc' ? valueA - valueB : valueB - valueA;
    };
    
    return [...vulnerabilities].sort(comparator);
  }, [vulnerabilities, order, orderBy]);
  
  // Pagination
  const paginatedVulnerabilities = sortedVulnerabilities.slice(
    page * rowsPerPage,
    page * rowsPerPage + rowsPerPage
  );
  
  return (
    <Paper sx={{ width: '100%', overflow: 'hidden' }}>
      <TableContainer sx={{ maxHeight: 440 }}>
        <Table size="small" stickyHeader>
          <TableHead>
            <TableRow>
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'title'}
                  direction={orderBy === 'title' ? order : 'asc'}
                  onClick={() => handleRequestSort('title')}
                >
                  Issue
                </TableSortLabel>
              </TableCell>
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'severity'}
                  direction={orderBy === 'severity' ? order : 'asc'}
                  onClick={() => handleRequestSort('severity')}
                >
                  Severity
                </TableSortLabel>
              </TableCell>
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'type'}
                  direction={orderBy === 'type' ? order : 'asc'}
                  onClick={() => handleRequestSort('type')}
                >
                  Type
                </TableSortLabel>
              </TableCell>
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'file'}
                  direction={orderBy === 'file' ? order : 'asc'}
                  onClick={() => handleRequestSort('file')}
                >
                  Location
                </TableSortLabel>
              </TableCell>
              <TableCell align="right">Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {paginatedVulnerabilities.map((vulnerability) => (
              <TableRow
                key={vulnerability.id}
                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
                hover
              >
                <TableCell component="th" scope="row">
                  <Typography variant="body2" fontWeight="medium">
                    {vulnerability.title}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Chip 
                    label={vulnerability.severity} 
                    color={getSeverityColor(vulnerability.severity)}
                    size="small"
                  />
                </TableCell>
                <TableCell>
                  <Chip 
                    label={getTypeLabel(vulnerability.type)} 
                    variant="outlined"
                    size="small"
                  />
                </TableCell>
                <TableCell>
                  <Typography variant="body2">
                    {vulnerability.file}
                    {vulnerability.line && `:${vulnerability.line}`}
                  </Typography>
                </TableCell>
                <TableCell align="right">
                  <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                    <Tooltip title="Copy details">
                      <IconButton 
                        size="small"
                        onClick={() => handleCopyDetails(
                          vulnerability.id, 
                          `${vulnerability.title} - ${vulnerability.severity} - ${vulnerability.file}${vulnerability.line ? `:${vulnerability.line}` : ''} - ${vulnerability.description}`
                        )}
                      >
                        {copiedId === vulnerability.id ? 
                          <CheckIcon fontSize="small" color="success" /> : 
                          <CopyIcon fontSize="small" />}
                      </IconButton>
                    </Tooltip>
                    
                    {onViewDetails && (
                      <Tooltip title="View details">
                        <IconButton 
                          size="small"
                          onClick={() => onViewDetails(vulnerability)}
                        >
                          <ViewIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                    )}
                  </Box>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={vulnerabilities.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Paper>
  );
};

export default VulnerabilityTable;